1、springcloud是基于springboot的，一般springboot2.0以上，必须jdk在1.8以上。

2、springcloud包含服务治理、注册中心、配置管理、断路器、智能路由、微代理、控制总线、全局锁、分布式会话。

3、springcloud的服务注册与发现
每一个服务注册之后都会向注册中心发送心跳，当client（要注册的服务）向server（注册中心）注册时，会提供一下元数据（主机、接口、url等），server从每个client接收心跳消息，如果超时，就会被注册中心剔除。

4、任何rpc远程调用框架都有一个注册中心（存放服务的接口地址）

5、通过restTemplate调用其他服务，底层都是基于httpclient。

6、eureka高可用的集群采用的是相互注册的原理

7、eureka的自我保护机制为了防止eurekaServer在网络不通的情况下，不会将注册的eurekaClient服务剔除。（Zookeeper是没有自我保护机制的）

8、什么情况下开启eureka自我保护机制？生产环境下一般不重启client的情况下，本地测试建议关闭自我保护机制。

9、Ribbon的本地负载均衡主要是通过@Loadblance注解实现的。

10、通过注入DiscoveryClient能获取到注册中心的服务信息

11、@EnableEurekaServer仅限Eureka注册中心，@EnableDiscoveryClient用于其他注册中心启动

12、本地负载均衡与服务端负载均衡的区别？
服务端负载均衡：Nginx，通过Nginx进行负载均衡，先发送请求，然后通过负载均衡算法，在多个服务器之间选择一个进行访问；即在服务器端再进行负载均衡算法分配。
本地负载均衡：Ribbon，客户端有一个服务信息列表，先通过负载均衡算法去选择一个服务，然后再进行访问。

13、Feign客户端默认开启Ribbon本地负载均衡。

14、Feign开启注解@EnableFeignClients，使用时注解@FeignClient；

15、服务雪崩效应：默认tomcat只有一个线程池的情况下，访问的线程达到最高值，导致其他访问请求不可用。

16、解决服务雪崩效应：@HystrixCommand注解方式开启以下三种机制
（1）服务降级：在高并发的时候，防止客户一直等待，返回一个友好的提示。（调用本地fallback方法）
（2）服务熔断：为了保护服务，在高并发时，请求达到极限时，自动开启保护服务功能，然后再使用服务降级，返回一个友好的提示。
（3）服务隔离：当某个服务或组件出现故障时，隔离这些故障并进行服务降级。

17、分布式配置中心configServer注解开启@EnableConfigServer


18、如何设计一套公司项目接口？
先考虑接口权限问题（开放接口|内部接口），考虑幂等性、安全性（https）、防止篡改数据（验证签名）、使用网关拦截接口实现黑名单和白名单。接口使用http协议+json格式（目的为了实现跨平台），考虑高并发问题、接口服务实现服务保护、服务降级、服务熔断、服务隔离。然后使用统一的API管理平台api swagger调用。。

19、网关zuul和过滤器的区别
网关zuul拦截整个微服务所有请求。
过滤器是拦截单个tomcat服务器请求。

20、Nginx服务器和网关zuul区别
相同点：Zuul和Nginx都可以实现负载均衡、反向代理、过滤请求、实现网关效果。
不同点：Nginx采用c语言编写、zuul采用java编写
zuul负载均衡实现：采用ribbon+eureka实现本地负载均衡
Nginx负载均衡实现：采用服务器端实现负载均衡

21、互联网公司网关都是集群的
zuul搭建集群版本 Nginx+Zuul一主一备或者轮询多个




