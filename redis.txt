1、redis是个非关系型数据库。关系型数据库数据存在硬盘中，查询实现IO操作。

2、redis是一个高性能的key-value数据库。

3、redis的功能有数据缓存功能、分布式锁的功能、支持数据持久化、支持事务、支持消息队列。

4、redis和memecache的区别
（1）存储方式不同，memecache全部存在内存中，redis部分存在硬盘中
（2）数据支持类型，redis有复杂的数据类型，memcache对数据支持简单。
（3）底层模型不同
（4）value值大小不同

5、redis的数据类型有string、list、hash、set、zset。

6、redis的应用场景:
（1）Token令牌的生成
（2）短信验证码的code
（3）可以缓存查询数据库
（4）分布式锁
（5）延迟操作

7、redis的底层是采用NIO中的多路复用（一个线程维护多个不同客户端io操作）机制，从而保证线程安全问题；

8、redis数据结构string
set  设置的name      get  获取name

9、redis数据结构hash（适合放对象）
hset usre  name *** 设置对象值 
hkey  user 查看对象属性
hleng user 查看属性个数
hdel  user  name 删除对象某个属性值
hget user name 获取对象某个属性值（如果没有就为nil）

10、redis数据结构list
lpush从左边插入
rpush从右边插入
rpop从边右拿出
lpop从左边拿出
lrang -1全部展示
lrang 1拿2个值（0到1）
11、redis数据结构set 是String类型的无序集合，值是唯一的，底层实现是哈希表实现。
sadd number 1 设置number为1
SPOP  number 随机弹出一个
SMEMBERS number 查看所有属性值
12、redis数据机构zset是
zadd person 1 xxx
zadd person 3 yyy
zrang person 0 -1 展示所有值（加withsocres能看到分数）
zrem person 想要删除的值

13、reids持久化策略（RDB、AOF）,通过reids.conf可以配置
RDB策略优点：
（1）适合大规模的数据恢复，数据恢复快
（2）如果业务对数据完整性和一致性要求不高，RDB是很好的选择。
缺点：
（1）数据的完整性和一致性不高，因为RDB可能在最后一次备份挂了。
（2）备份时占用内存，因为redis在备份时会独立创建一个子进程，将数据写入一个临时文件，最后再将临时文件替换之前的备份文件，当数据比较大时，可能会造成redis服务暂停、卡顿。
AOF策略优点：
数据的完整性和一致性更高
缺点：
因为AOF记录的内容多，文件会越来越大，数据恢复也会越来越慢

14、redis的过期键的处理（惰性删除和定时删除一起用）
redis可以设置过期时间，当键过期后，没有从reids中消除，而是存在过期字典中，依然会占用内存。
（1）定时删除：设置过期时间的通过，创建一个定时器，来对键进行删除操作，对cpu造成压力。
（2）惰性删除：当每次获取键时，会去检测过期时间，如果过期，就删除键，如果没过期就返回键。对内存压力大，如果大量键过期，又没有业务访问，容易造成内存的浪费。
（3）定期删除：每隔一段时间，程序对数据库进行一次检查，删除里面过期的键。
15、内存淘汰策略：是通过配置文件的maxmemory设置来处理的





